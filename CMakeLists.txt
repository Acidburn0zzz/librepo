PROJECT (librepo)
CMAKE_MINIMUM_REQUIRED (VERSION 2.6)

INCLUDE (${CMAKE_SOURCE_DIR}/VERSION.cmake)
SET (VERSION "${LIBREPO_MAJOR}.${LIBREPO_MINOR}.${LIBREPO_PATCH}")

SET (CMAKE_C_FLAGS          "${CMAKE_C_FLAGS} -std=c99 -Wall")
SET (CMAKE_C_FLAGS_DEBUG    "${CMAKE_C_FLAGS} -ggdb -O0 -Wall -Wextra -DDEBUG")

IF(CMAKE_BUILD_TYPE AND (CMAKE_BUILD_TYPE STREQUAL "DEBUG" OR CMAKE_BUILD_TYPE STREQUAL "debug"))
    MESSAGE("Build type is set do DEBUG!")
ENDIF()


# Add path with own cmake modules

INCLUDE_DIRECTORIES (${CMAKE_SOURCE_DIR})
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/Modules/")


# Find necessare libraries

FIND_PACKAGE(EXPAT REQUIRED)
FIND_PACKAGE(CURL REQUIRED)
FIND_LIBRARY(CHECK_LIBRARY NAMES check)
FIND_PACKAGE(Gpgme REQUIRED)


# Check to see if we have large file support

include(CheckFileOffsetBits)
check_file_offset_bits()
if (_FILE_OFFSET_BITS)
    add_definitions(-D_FILE_OFFSET_BITS=${_FILE_OFFSET_BITS})
endif (_FILE_OFFSET_BITS)

# Check libraries

IF (NOT EXPAT_FOUND)
    MESSAGE(FATAL_ERROR "No Expat library installed")
ENDIF (NOT EXPAT_FOUND)

IF (NOT CURL_FOUND)
    MESSAGE(FATAL_ERROR "No CURL library installed")
ENDIF (NOT CURL_FOUND)


# Add include dirs

INCLUDE_DIRECTORIES(${EXPAT_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${CURL_INCLUDE_DIR})
#INCLUDE_DIRECTORIES(${CHECK_INCLUDE_DIR})

IF (NOT LIB_INSTALL_DIR)
  SET (LIB_INSTALL_DIR "${CMAKE_INSTALL_PREFIX}/usr/lib")
ENDIF (NOT LIB_INSTALL_DIR)

IF (NOT INCLUDE_INSTALL_DIR)
  SET (INCLUDE_INSTALL_DIR "${CMAKE_INSTALL_PREFIX}/usr/include")
ENDIF (NOT INCLUDE_INSTALL_DIR)


# Subdirs

ADD_SUBDIRECTORY (librepo)
ENABLE_TESTING()
ADD_SUBDIRECTORY (tests)
ADD_SUBDIRECTORY (doc)
